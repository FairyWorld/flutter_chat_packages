initFsaLibrary()

group 'com.fsa.chat_bottom_container'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.fsa.chat_bottom_container'
    }

    compileSdk 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 19
    }

    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.mockito:mockito-core:5.0.0'
        // implementation fileTree(dir: "flatDir", include: ["*.aar"])
        implementation project(':chat_bottom_container:chat_bottom_container')
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }
}

def initFsaLibrary() {
    def archives = [
            [
                    'src' : 'https://github.com/LinXunFeng/flutter_chat_packages_pub/releases/download/chat_bottom_container/android_release_0.0.1.aar',
                    'dest': "${rootProject.file("../../android/chat_bottom_container").path}"
            ]
    ]
    archives.eachWithIndex { archive, index ->
        def url = archive.src
        def fileName = url.substring(url.lastIndexOf('/') + 1, url.length())
        def destFile = file("${archive.dest}/${fileName}")
        if (!destFile.parentFile.exists()) {
            destFile.parentFile.mkdirs()
        }
        if (!destFile.exists()) {
            // del *.aar in archive dir
            destFile.parentFile.listFiles().each {
                if (it.path.endsWith(".aar")) {
                    println "Delete ${it.path}"
                    it.delete()
                }
            }
            // download new .arr file
            println "Download ${fileName} to ${destFile}"
            ant.get(src: url, dest: destFile)
        }
    }
}